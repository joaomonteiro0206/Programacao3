	

    #include <stdio.h>
    #include <stdlib.h>
     
    typedef struct{
            char Nome[50], Morada[50];
            int Idade, BI;
            char Sexo[1]; // Masculino(m/M) - Feminino(f/F);s
    } ELEMENTO;
     
    void CriarElemento(ELEMENTO E){
            printf("Insira o nome: \n");
            gets(E.Nome);
            printf("Insira a morada: \n");
            gets(E.Morada);
            printf("Insira a idade: \n");
            scanf("%d", E.Idade);
            printf("Insira o BI: \n");
            scanf("%d", E.BI);
            printf("Insira o sexo (M/m; F/f): \n");
            gets(E.Sexo);
    }
     
    int ListaVazia1(ELEMENTO L[]){
            if(L == NULL)
                    return 1;
            return 0;
    }
     
    int ListaVazia2(int N){
            if(N == 0)
                    return 1;
            return 0;
    }
     
    ELEMENTO *InserirInicio (ELEMENTO X, ELEMENTO L[], int *N){
            int k;
            L = (ELEMENTO *) realloc(L,(*N+1)*sizeof(ELEMENTO));
            if(L == NULL)
                    return NULL;
            *N = *N+1;
            for(k=*N-1;k>0;k--)
                    L[k] = L[k-1];
            L[0] = X;
            return L;
    }
     
    ELEMENTO *InserirFim(ELEMENTO X, ELEMENTO L[], int *N){
            L = (ELEMENTO *) realloc(L,(*N+1)*sizeof(int));
            if(L == NULL)
                    return NULL;
            *N = *N + 1;
            L[*N-1] = X;
            return L;
    }
     
    ELEMENTO *InserirOrdem(ELEMENTO X, ELEMENTO L[], int *N){
            int k, pos;
            L = (ELEMENTO *) realloc(L,(*N+1)*sizeof(int));
            if(L == NULL)
                    return NULL;
            pos = 0;
            while((pos<*N) &&(L[pos].BI> X.BI))
                    pos = pos + 1;
            *N = *N + 1;
            for(k=*N-1;k>pos;k--)
                    L[k] = L[k-1];
            L[pos] = X;
            return L;
    }
     
    /*
    ELEMENTO *Remover1 (ELEMENTO X, ELEMENTO L[], int *N){
            int k, pos, *aux;
            pos = PesquisaExautiva(X,L,*N);
            if(pos != 0){
                    for(k = pos; k< *N-1; k++)
                            L[k] = L[k+1];
                    *N = *N - 1;
                    L = (ELEMENTO * ) realloc(L,*N*sizeof(ELEMENTO));
            }
            return L;
    }
    */
     
    ELEMENTO *Remover2 (int Pos, ELEMENTO L[], int *N){
            int k;
            for(k = Pos;k<*N-1;k++)
                    L[k] = L[k+1];
            *N = *N -1;
            L = (ELEMENTO *) realloc(L,(*N)*sizeof(ELEMENTO));
            return L;
    }

